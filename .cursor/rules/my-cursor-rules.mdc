---
description: WFGame AI 测试框架规则
globs: 
alwaysApply: true
---
# WFGame AI 自动化测试框架代码规范

## ai-server 服务启动命令
- `python .\start_wfgame_ai.py`

## 项目统一使用请求方法
- 全部使用 POST

## python 目录
- `F:\QA\Software\anaconda3\envs\py39_yolov10\python.exe`

## 注意事项
- 训练模型时仅需支持 Windows（CUDA），不用支持 Mac（MPS）系统（模型训练完全在 Windows 上进行）。
- 分析后直接在原文件内改动代码。
- 添加详细的注释。

## 常用路径
- airtest 报告生成需要静态资源（CSS/JS 等静态资源目录）是在 airtest 包的 report/ 目录下。

## 代码修改规范

### 修改方式
- 直接在原文件上修改。

### 路径规则
- 全局禁止出现/使用绝对路径。

## YOLO 训练规范

### Windows 配置：
- Intel(R) Core(TM) i7-14700   2.10 GHz
- 显示卡 NVIDIA GeForce RTX 4090
- RAM 32.0 GB
- 64 位操作系统, 基于 x64 的处理器

### Mac 配置：
- Apple M2 Pro
- RAM 16GB

### 修复规则
- 禁止为修复问题创建新的文件或函数。禁止增加或使用 cleanup_unused_files！
- 所有修复必须直接在原始文件中进行。
- 必须在文件内添加注释说明修改的内容和目的。
- 讲清楚原因后直接生成或修复代码。

### 代码提交规范
- 提交前必须验证修复是否解决了问题。
- 提交后必须验证是否有低级的缩进错误。
- 每次修改必须提供完整的测试方法和预期结果。
- 禁止提交未经测试的代码。

## Python 代码规范

### 导入规则
```python
# 标准库导入
import os
import sys
import json

# 第三方库导入
import numpy as np
import torch
import cv2

# 本地模块导入
from apis.logger import Logger
from models.yolo import YOLO
```

### 命名规范

#### 变量命名
```python
# 常量使用大写
MAX_RETRY_COUNT = 3
DEFAULT_TIMEOUT = 30

# 普通变量使用小写下划线
device_name = "OnePlus"
current_step = 0

# 私有变量以单下划线开头
_internal_counter = 0
```

#### 函数命名
```python
# 公共函数使用小写下划线
def process_image(frame):
    pass

# 私有函数以单下划线开头
def _internal_process():
    pass

# 类方法使用驼峰
def processNextFrame(self):
    pass
```

#### 类命名
```python
# 类名使用驼峰
class DeviceManager:
    pass

class UIDetector:
    pass
```

### 格式规范

1. **缩进**
   - 使用 4 个空格进行缩进
   - 不使用制表符
2. **行长度**
   - 最大行长度为 120 字符
   - 超长行使用括号换行
3. **空行**
   - 类定义之间空两行
   - 方法定义之间空一行
   - 相关代码块之间空一行
4. **注释**
```python
# 单行注释使用 # 加空格
# 这是一个单行注释

"""
多行注释使用三引号
第一行空行
具体描述从第二行开始
"""
```

### 文档字符串

#### 函数文档
```python
def process_device(device_name: str, timeout: int = 30) -> bool:
    """
    处理设备连接和初始化。

    Args:
        device_name: 设备名称
        timeout: 超时时间（秒）

    Returns:
        bool: 处理是否成功
    
    Raises:
        DeviceConnectionError: 设备连接失败时抛出
    """
    pass
```

#### 类文档
```python
class DeviceManager:
    """
    设备管理器类。
    
    负责管理设备连接、状态监控和资源释放。
    
    Attributes:
        devices (List[str]): 已连接设备列表
        current_device (str): 当前活动设备
    """
    pass
```

### 异常处理
```python
try:
    process_device()
except DeviceError as e:
    logger.error(f"设备处理失败: {e}")
    raise
finally:
    cleanup_resources()
```

### 类型注解
```python
from typing import List, Dict, Optional

def process_results(
    results: List[Dict[str, float]],
    threshold: Optional[float] = None
) -> bool:
    pass
```

## 项目结构规范

### 文件命名
- 全小写
- 使用下划线分隔
- 描述性命名
- 例如：device_manager.py

## Git 提交规范

### 提交信息格式
```text
<type>(<scope>): <subject>

<body>

<footer>
```

### Type 类别
- feat: 新功能
- fix: 修复
- docs: 文档
- style: 格式
- refactor: 重构
- test: 测试
- chore: 构建

### 示例
```text
feat(device): 添加设备自动重连功能

- 实现设备断开后自动重连
- 添加重连次数限制
- 优化重连日志

Closes #123
```

## 测试规范

### 单元测试
```python
def test_device_connection():
    """测试设备连接功能"""
    device = DeviceManager()
    assert device.connect() is True
```

### 集成测试
```python
def test_full_workflow():
    """测试完整工作流程"""
    device = DeviceManager()
    detector = UIDetector()
    assert device.connect()
    assert detector.initialize()
```

## 日志规范
```python
import logging

logger = logging.getLogger(__name__)

# 错误日志
logger.error("设备连接失败", exc_info=True)

# 警告日志
logger.warning("检测到性能下降")

# 信息日志
logger.info("开始处理设备")

# 调试日志
logger.debug("当前处理步骤: %d", step)
```

## 配置文件规范

### JSON 配置
```json
{
    "device": {
        "name": "OnePlus",
        "timeout": 30,
        "retry_count": 3
    },
    "model": {
        "path": "models/yolo.pt",
        "confidence": 0.5
    }
}
```

### YAML 配置
```yaml
device:
  name: OnePlus
  timeout: 30
  retry_count: 3

model:
  path: models/yolo.pt
  confidence: 0.5
```

## 性能优化规范

### 资源管理
```python
with open("file.txt") as f:
    content = f.read()
```

### 循环优化
```python
# 优先使用列表推导
squares = [x * x for x in range(10)]

# 避免在循环中频繁分配内存
results = []
for item in items:
    results.append(process(item))
```

### 数据结构选择
```python
# 使用集合进行成员检查
valid_devices = set(["device1", "device2"])
if device in valid_devices:
    process_device()
```

## 深度学习与大模型开发规范

### 核心原则
- 代码简洁、技术准确，示例规范。
- 优先高效、可维护的深度学习工作流。
- 模型架构用面向对象，数据处理用函数式。
- GPU高效利用，混合精度训练。
- 变量命名清晰。
- 遵循PEP8。

### PyTorch/Transformers/Diffusers/Gradio 相关最佳实践
- 详见原文档内容（略）。

---

> 本规范文档已修正所有 Markdown 标题、代码块、缩进、列表、注释等格式，适合团队协作与自动化解析。



`You are tasked with adding comments to a piece of code to make it more understandable for AI systems or human developers. The code will be provided to you, and you should analyze it and add appropriate comments.

To add comments to this code, follow these steps:

1. Analyze the code to understand its structure and functionality.
2. Identify key components, functions, loops, conditionals, and any complex logic.
3. Add comments that explain:
- The purpose of functions or code blocks
- How complex algorithms or logic work
- Any assumptions or limitations in the code
- The meaning of important variables or data structures
- Any potential edge cases or error handling

When adding comments, follow these guidelines:

- Use clear and concise language
- Avoid stating the obvious (e.g., don't just restate what the code does)
- Focus on the "why" and "how" rather than just the "what"
- Use single-line comments for brief explanations
- Use multi-line comments for longer explanations or function/class descriptions

Your output should be the original code with your added comments. Make sure to preserve the original code's formatting and structure.

Remember, the goal is to make the code more understandable without changing its functionality. Your comments should provide insight into the code's purpose, logic, and any important considerations for future developers or AI systems working with this code.`

# WFGame AI API开发规范

## API请求方法规范

1. **统一使用POST请求**
   - 所有API端点必须支持POST方法，禁止使用GET/PUT/DELETE
   - 在APIView中添加 `http_method_names = ['post']`
   - 在ViewSet中添加同样配置
   - action装饰器必须指定 `methods=['post']`

2. **权限控制**
   - 所有API视图必须允许匿名访问
   - 在所有视图类中添加 `permission_classes = [AllowAny]`
   - 禁止使用需要身份验证的权限类

3. **路由配置**
   - 避免URL路由冲突，每个API路径对应唯一视图
   - 禁止多个视图指向同一URL路径
   - API路径必须遵循RESTful规范，例如 `/api/devices/scan/`
   - 在include其他应用的urls.py时必须注意路径前缀

4. **错误处理**
   - 400错误: 确保提供所有必填字段，API设计时最小化必填字段
   - 404错误: 确保所有路由正确配置，前端调用存在的API路径
   - 405错误: 确保视图类允许正确的HTTP方法
   - 禁止直接抛出未处理的异常，必须捕获并返回友好错误信息

5. **请求与响应**
   - API参数验证必须提供清晰错误信息
   - 响应必须使用统一格式，错误时包含detail字段
   - 成功操作返回HTTP 200状态码
   - 前端调用API时必须设置Content-Type为application/json

## 测试与监控

1. **接口测试**
   - 修改API后必须进行测试，确认HTTP方法和权限设置正确
   - 使用Postman或前端调用验证端点可访问性

2. **错误监控**
   - 注意日志中的请求错误，特别是405/403/400错误
   - 发现错误需立即修复对应视图类的配置

## 示例代码

```python
# 正确的APIView配置
class MyApiView(views.APIView):
    permission_classes = [AllowAny]  # 允许所有用户访问
    http_method_names = ['post']  # 只允许POST方法
    
    def post(self, request):
        # 处理请求
        return Response({"detail": "操作成功"})

# 正确的ViewSet配置
class MyViewSet(viewsets.ModelViewSet):
    queryset = MyModel.objects.all()
    serializer_class = MySerializer
    permission_classes = [AllowAny]  # 允许所有用户访问
    http_method_names = ['post']  # 只允许POST方法
    
    @action(detail=True, methods=['post'])
    def my_custom_action(self, request, pk=None):
        # 处理请求
        return Response({"detail": "操作成功"})
```

## 前端API调用示例

```javascript
// 正确的API调用方式
fetch('/api/endpoint/', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data)
})
    .then(res => {
        if (!res.ok) {
            return res.json().then(errData => {
                throw new Error(errData.detail || `状态码: ${res.status}`);
            });
        }
        return res.json();
    })
    .then(data => {
        // 处理成功响应
    })
    .catch(e => {
        // 处理错误
    });
```


    
