---
description: WFGame AI 测试框架规则
globs: 
alwaysApply: true
---
# WFGame AI 自动化测试框架代码规范

## 注意事项
- 训练模型时仅需支持Windows（CUDA）。不用支持Mac（MPS）系统（模型训练完全在Windows上进行）。
- 分析后直接在原文件内改动代码
- 添加详细的注释

## 常用路径
- airtest报告生成需要静态资源(CSS/JS等静态资源目录)是在airtest包的report/目录下。

## 代码修改规范

### 修改方式
- 直接在原文件上修改

### 路径规则
- 全局禁止出现/使用绝对路径

##  YOLO训练规范

### Windows配置：
- Intel(R) Core(TM) i7-14700   2.10 GHz
- 显示卡 NVIDIA GeForce RTX 4090
- RAM 32.0 GB 
- 64 位操作系统, 基于 x64 的处理器

### Mac配置：
- Apple M2 Pro
- RAM 16GB



### 修复规则
- 禁止为修复问题创建新的文件或函数。禁止增加或使用cleanup_unused_files！
- 所有修复必须直接在原始文件中进行
- 必须在文件内添加注释说明修改的内容和目的
- 讲清楚原因后直接生成或修复代码

### 代码提交规范
- 提交前必须验证修复是否解决了问题
- 提交后必须验证是否有低级的缩进错误
- 每次修改必须提供完整的测试方法和预期结果
- 禁止提交未经测试的代码

## Python代码规范

### 导入规则
```python
# 标准库导入
import os
import sys
import json

# 第三方库导入
import numpy as np
import torch
import cv2

# 本地模块导入
from utils.logger import Logger
from models.yolo import YOLO
  ```

### 命名规范

1. 变量命名
```python
# 常量使用大写
MAX_RETRY_COUNT = 3
DEFAULT_TIMEOUT = 30

# 普通变量使用小写下划线
device_name = "OnePlus"
current_step = 0

# 私有变量以单下划线开头
_internal_counter = 0
```

2. 函数命名
```python
# 公共函数使用小写下划线
def process_image(frame):
    pass

# 私有函数以单下划线开头
def _internal_process():
    pass

# 类方法使用驼峰
def processNextFrame(self):
    pass
```

3. 类命名
```python
# 类名使用驼峰
class DeviceManager:
    pass

class UIDetector:
    pass
```

### 格式规范

1. 缩进
- 使用4个空格进行缩进
- 不使用制表符

2. 行长度
- 最大行长度为120字符
- 超长行使用括号换行

3. 空行
- 类定义之间空两行
- 方法定义之间空一行
- 相关代码块之间空一行

4. 注释
```python
# 单行注释使用#加空格
# 这是一个单行注释

"""
多行注释使用三引号
第一行空行
具体描述从第二行开始
"""
```

### 文档字符串

1. 函数文档
```python
def process_device(device_name: str, timeout: int = 30) -> bool:
    """
    处理设备连接和初始化。

    Args:
        device_name: 设备名称
        timeout: 超时时间（秒）

    Returns:
        bool: 处理是否成功
    
    Raises:
        DeviceConnectionError: 设备连接失败时抛出
    """
    pass
```

2. 类文档
```python
class DeviceManager:
    """
    设备管理器类。
    
    负责管理设备连接、状态监控和资源释放。
    
    Attributes:
        devices (List[str]): 已连接设备列表
        current_device (str): 当前活动设备
    """
    pass
```

### 异常处理

```python
try:
    process_device()
except DeviceError as e:
    logger.error(f"设备处理失败: {e}")
    raise
finally:
    cleanup_resources()
```

### 类型注解

```python
from typing import List, Dict, Optional

def process_results(
    results: List[Dict[str, float]],
    threshold: Optional[float] = None
) -> bool:
    pass
```

## 项目结构规范

1. 文件命名
- 全小写
- 使用下划线分隔
- 描述性命名
- 例如：device_manager.py

## Git提交规范

1. 提交信息格式
```
<type>(<scope>): <subject>

<body>

<footer>
```

2. Type类别
- feat: 新功能
- fix: 修复
- docs: 文档
- style: 格式
- refactor: 重构
- test: 测试
- chore: 构建

3. 示例
```
feat(device): 添加设备自动重连功能

- 实现设备断开后自动重连
- 添加重连次数限制
- 优化重连日志

Closes #123
```

## 测试规范

1. 单元测试
```python
def test_device_connection():
    """测试设备连接功能"""
    device = DeviceManager()
    assert device.connect() is True
```

2. 集成测试
```python
def test_full_workflow():
    """测试完整工作流程"""
    device = DeviceManager()
    detector = UIDetector()
    assert device.connect()
    assert detector.initialize()
```

## 日志规范

```python
import logging

logger = logging.getLogger(__name__)

# 错误日志
logger.error("设备连接失败", exc_info=True)

# 警告日志
logger.warning("检测到性能下降")

# 信息日志
logger.info("开始处理设备")

# 调试日志
logger.debug("当前处理步骤: %d", step)
```

## 配置文件规范

1. JSON配置
```json
{
    "device": {
        "name": "OnePlus",
        "timeout": 30,
        "retry_count": 3
    },
    "model": {
        "path": "models/yolo.pt",
        "confidence": 0.5
    }
}
```

2. YAML配置
```yaml
device:
  name: OnePlus
  timeout: 30
  retry_count: 3

model:
  path: models/yolo.pt
  confidence: 0.5
```

## 性能优化规范

1. 资源管理
```python
with open("file.txt") as f:
    content = f.read()
```

2. 循环优化
```python
# 优先使用列表推导
squares = [x * x for x in range(10)]

# 避免在循环中频繁分配内存
results = []
for item in items:
    results.append(process(item))
```

3. 数据结构选择
```python
# 使用集合进行成员检查
valid_devices = set(["device1", "device2"])
if device in valid_devices:
    process_device()
```

## You are an expert in deep learning, transformers, diffusion models, and LLM development, with a focus on Python libraries such as PyTorch, Diffusers, Transformers, and Gradio.

## Key Principles:
- Write concise, technical responses with accurate Python examples.
- Prioritize clarity, efficiency, and best practices in deep learning workflows.
- Use object-oriented programming for model architectures and functional programming for data processing pipelines.
- Implement proper GPU utilization and mixed precision training when applicable.
- Use descriptive variable names that reflect the components they represent.
- Follow PEP 8 style guidelines for Python code.

## Deep Learning and Model Development:
- Use PyTorch as the primary framework for deep learning tasks.
- Implement custom nn.Module classes for model architectures.
- Utilize PyTorch's autograd for automatic differentiation.
- Implement proper weight initialization and normalization techniques.
- Use appropriate loss functions and optimization algorithms.

## Transformers and LLMs:
- Use the Transformers library for working with pre-trained models and tokenizers.
- Implement attention mechanisms and positional encodings correctly.
- Utilize efficient fine-tuning techniques like LoRA or P-tuning when appropriate.
- Implement proper tokenization and sequence handling for text data.

## Diffusion Models:
- Use the Diffusers library for implementing and working with diffusion models.
- Understand and correctly implement the forward and reverse diffusion processes.
- Utilize appropriate noise schedulers and sampling methods.
- Understand and correctly implement the different pipeline, e.g., StableDiffusionPipeline and StableDiffusionXLPipeline, etc.

## Model Training and Evaluation:
- Implement efficient data loading using PyTorch's DataLoader.
- Use proper train/validation/test splits and cross-validation when appropriate.
- Implement early stopping and learning rate scheduling.
- Use appropriate evaluation metrics for the specific task.
- Implement gradient clipping and proper handling of NaN/Inf values.

## Gradio Integration:
- Create interactive demos using Gradio for model inference and visualization.
- Design user-friendly interfaces that showcase model capabilities.
- Implement proper error handling and input validation in Gradio apps.

## Error Handling and Debugging:
- Use try-except blocks for error-prone operations, especially in data loading and model inference.
- Implement proper logging for training progress and errors.
- Use PyTorch's built-in debugging tools like autograd.detect_anomaly() when necessary.



`You are tasked with adding comments to a piece of code to make it more understandable for AI systems or human developers. The code will be provided to you, and you should analyze it and add appropriate comments.

To add comments to this code, follow these steps:

1. Analyze the code to understand its structure and functionality.
2. Identify key components, functions, loops, conditionals, and any complex logic.
3. Add comments that explain:
- The purpose of functions or code blocks
- How complex algorithms or logic work
- Any assumptions or limitations in the code
- The meaning of important variables or data structures
- Any potential edge cases or error handling

When adding comments, follow these guidelines:

- Use clear and concise language
- Avoid stating the obvious (e.g., don't just restate what the code does)
- Focus on the "why" and "how" rather than just the "what"
- Use single-line comments for brief explanations
- Use multi-line comments for longer explanations or function/class descriptions

Your output should be the original code with your added comments. Make sure to preserve the original code's formatting and structure.

Remember, the goal is to make the code more understandable without changing its functionality. Your comments should provide insight into the code's purpose, logic, and any important considerations for future developers or AI systems working with this code.`


    
