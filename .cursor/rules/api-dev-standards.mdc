---
description: 
globs: 
alwaysApply: true
---
# WFGame AI API开发规范

## API请求方法规范

1. **统一使用POST请求**
   - 所有API端点必须支持POST方法，禁止使用GET/PUT/DELETE
   - 在APIView中添加 `http_method_names = ['post']`
   - 在ViewSet中添加同样配置
   - action装饰器必须指定 `methods=['post']`

2. **权限控制**
   - 所有API视图必须允许匿名访问
   - 在所有视图类中添加 `permission_classes = [AllowAny]`
   - 禁止使用需要身份验证的权限类

3. **路由配置**
   - 避免URL路由冲突，每个API路径对应唯一视图
   - 禁止多个视图指向同一URL路径
   - API路径必须遵循RESTful规范，例如 `/api/devices/scan/`
   - 在include其他应用的urls.py时必须注意路径前缀

4. **错误处理**
   - 400错误: 确保提供所有必填字段，API设计时最小化必填字段
   - 404错误: 确保所有路由正确配置，前端调用存在的API路径
   - 405错误: 确保视图类允许正确的HTTP方法
   - 禁止直接抛出未处理的异常，必须捕获并返回友好错误信息

5. **请求与响应**
   - API参数验证必须提供清晰错误信息
   - 响应必须使用统一格式，错误时包含detail字段
   - 成功操作返回HTTP 200状态码
   - 前端调用API时必须设置Content-Type为application/json

## 测试与监控

1. **接口测试**
   - 修改API后必须进行测试，确认HTTP方法和权限设置正确
   - 使用Postman或前端调用验证端点可访问性

2. **错误监控**
   - 注意日志中的请求错误，特别是405/403/400错误
   - 发现错误需立即修复对应视图类的配置

## 示例代码

```python
# 正确的APIView配置
class MyApiView(views.APIView):
    permission_classes = [AllowAny]  # 允许所有用户访问
    http_method_names = ['post']  # 只允许POST方法
    
    def post(self, request):
        # 处理请求
        return Response({"detail": "操作成功"})

# 正确的ViewSet配置
class MyViewSet(viewsets.ModelViewSet):
    queryset = MyModel.objects.all()
    serializer_class = MySerializer
    permission_classes = [AllowAny]  # 允许所有用户访问
    http_method_names = ['post']  # 只允许POST方法
    
    @action(detail=True, methods=['post'])
    def my_custom_action(self, request, pk=None):
        # 处理请求
        return Response({"detail": "操作成功"})
```

## 前端API调用示例

```javascript
// 正确的API调用方式
fetch('/api/endpoint/', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data)
})
    .then(res => {
        if (!res.ok) {
            return res.json().then(errData => {
                throw new Error(errData.detail || `状态码: ${res.status}`);
            });
        }
        return res.json();
    })
    .then(data => {
        // 处理成功响应
    })
    .catch(e => {
        // 处理错误
    });
```

